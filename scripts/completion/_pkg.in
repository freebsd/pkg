#compdef pkg

_pkg_installed() {
	local expl
	_wanted packages expl package \
	compadd "$@" - $(@prefix@/sbin/pkg query "%n-%v")
}

_pkg_available_name() {
	local expl
	_wanted packages expl package \
	compadd "$@" - $(@prefix@/sbin/pkg rquery "%n")
}

_pkg_aliases() {
	local expl
	_wanted aliases expl alias \
	compadd "$@" - $(@prefix@/sbin/pkg alias -ql)
}

_pkg_available() {
	local ret=1
	_tags files packages
	while _tags; do
		if _requested files; then
			_files "$@" -g "*.t?z" && ret=0
		fi
		if _requested packages; then
			compadd "$@" - $(@prefix@/sbin/pkg rquery "%n-%v") && ret=0
		fi
		(( ret )) || break
	done
	return ret
}

_pkg() {
	local curcontext="$curcontext" state state_descr line ret=1
	local earlyargs subcmd
	local subcmd_list cmd
	earlyargs=(
	'-d[increment debug level]'
	'-j[execute pkg(8) inside a jail(8)]:jail:_jails'
	'-c[execute pkg(8) inside a chroot(8)]:chroot:_files -/'
	'-C[use the specified configuration file]'
	'-l[list available command and exit]'
	'-v[display pkg(8) version]'
	'-N[test if pkg(8) is activated and avoid auto-activation]'
	)

	subcmd=(
		'add[compatibility interface to install a package]'
		'alias[list the command line aliases]'
		'annotate[add, modify or delete tag-value style annotations on packages]'
		'audit[report vulnerable packages]'
		'autoremove[remove orphaned packages]'
		'backup[back-up and restore the local package database]'
		'check[check for missing dependencies and database consistency]'
		'clean[clean old packages from the cache]'
		'config[display value of a configuration option]'
		'convert[convert database from/to pkgng]'
		'create[create software package distributions]'
		'delete[delete packages from the database and the system]'
		'fetch[fetch packages from a remote repository]'
		'help[display help information]'
		'info[display information about installed packages]'
		'install[install packages from remote package repositories]'
		'lock[lock package against modifications or deletion]'
		'query[query information about installed packages]'
		'register[register a package with the local database]'
		'remove[delete packages from the database and the system]'
		'repo[create a package repository catalogue]'
		'rquery[query information in repository catalogues]'
		'search[perform a search of package repository catalogues]'
		'set[modify information about packages in the local database]'
		'shell[open a debug shell]'
		'shlib[list packages that link against a specific shared library]'
		'stats[display package database statistics]'
		'unlock[unlock a package, allowing modification or deletion]'
		'update[update package repository catalogues]'
		'updating[display UPDATING information for a package]'
		'upgrade[perform upgrades of packaged software distributions]'
		'version[display versions of installed packages]'
		'which[display which package installed a specific file]'
	)

	if [[ $service = "pkg" ]]; then

		_arguments -C -A "-*" \
			$earlyargs \
			'*::command:->subcmd' && return

		if (( CURRENT == 1 )); then
			_values 'pkg subcommands' \
				$subcmd
			return
		fi
		service="$words[1]"
		curcontext="${curcontext%:*}-$service:"
	fi

	case $service in
		(add) _arguments -A 'package' \
			'*:package:_files -g "*.t?z"' && return
			;;
		(alias)
			_arguments -s \
				'-q[quiet]' \
				'*:alias:_pkg_aliases' \
				&& return
			;;
		(audit)
			_arguments -s \
				'-F[fetch database before checking]' \
				'-q[quiet]' \
				'-r[print packages that depend on vulnerable packages]' \
				'-f[local copy of the vulnerability database]:audit file:_files' \
				'*:package:_pkg_installed' \
				&& return
			;;
		(autoremove)
			_arguments -s \
				'(-n)-y[assume yes when asked for confirmation]' \
				'(-y)-n[assume no (dry run) when asked for confirmation]' \
				&& return
			;;
		(backup)
			_arguments -s \
				'(-r)-d[dump local package database]:destination:_files' \
				'(-d)-r[restore local package database]:destination:_files' \
				&& return
			;;
		(check)
			_arguments -s \
				'-B[reanalyze the shared libraries]' \
				'-d[check for and install missing dependencies]' \
				'-r[recompute sizes and checksums of installed]' \
				'-s[find invalid checksums]' \
				'-v[be verbose]' \
				'(-g -x -X)-a[process all packages]' \
				'(-x -X -a)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X -a)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				&& return
			;;
		(clean)
			return 0
			;;
		(convert)
			_arguments -s \
				'-r[revert conversion]' \
				&& return
			;;
		(create)
			_arguments -s \
				'-r[specify root directory]:rootdir:_files -/' \
				'-m[specify manifest directory]:manifestdir:_files -/' \
				'-f[format]:format:((tar tgz tbz txz))' \
				'-o[output directory]:outdir:_files -/' \
				'(-g -x -X)-a[process all packages]' \
				'(-x -X -a)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X -a)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				'*:package:_pkg_installed' \
				&& return
			;;
		(delete|remove)
			_arguments -s \
				'(-n)-y[assume yes when asked for confirmation]' \
				'(-y)-n[assume no (dry run) when asked for confirmation]' \
				'-f[force the package(s) to be removed]' \
				'(-g -x -X)-a[process all packages]' \
				'(-x -X -a)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X -a)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				'*:package:_pkg_installed' \
				&& return
			;;
		(fetch)
			_arguments -s \
				'-y[assume yes when asked for confirmation]' \
				"-L[don't try to update the repository metadata]" \
				'-q[be quiet]' \
				'(-g -x -X)-a[process all packages]' \
				'(-x -X -a)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X -a)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				'*:available package:_pkg_available' \
				&& return
			;;
		(help)
			_arguments -s \
				':command:_values -S " " -w "pkg subcommand" ${subcmd/\[*/}'
			return 0
			;;
		(info)
			_arguments -s \
				'(-e -d -r -l -o -p -D)-f[display full information]' \
				'(-f -d -r -l -o -p -D)-e[return 0 if specified package is installed]' \
				'(-e -f -r -l -o -p -D)-d[display the dependencies]' \
				'(-e -d -f -l -o -p -D)-r[display the reverse dependencies]' \
				'(-e -d -r -f -o -p -D)-l[display all files]' \
				'(-e -d -r -l -f -p -D)-o[display origin]' \
				'(-e -d -r -l -o -f -D)-p[display prefix]' \
				'(-e -d -r -l -o -p -f)-D[display message]' \
				'-q[be quiet]' \
				'(-g -x -X -F)-a[process all packages]' \
				'(-x -X -a -F)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X -a -F)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a -F)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				'(-g -x -X -a)-F[process the specified package]:package:_files -g "*.t?z"' \
				'*:package:_pkg_installed' \
				&& return
			;;
		(install)
			_arguments -s \
				'(-n)-y[assume yes when asked for confirmation]' \
				'(-y)-n[assume no (dry run) when asked for confirmation]' \
				'-f[force reinstallation if needed]' \
				'-R[reinstall every package depending on matching expressions]' \
				"-L[don't try to update the repository metadata]" \
				'(-x -X)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				'*:available packages:_pkg_available' \
				&& return
			;;
		(query)
			_arguments -C -s \
				'(-g -x -X -F -e)-a[process all packages]' \
				'-C[case-insensitive regex matching]' \
				'(-x -X -a -F -e)-g[process packages that match a glob pattern]:glob pattern' \
				'(-g -X -a -F -e)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a -F -e)-X[process packages that match an extended regex pattern]:extended regex pattern' \
				'(-g -x -X -a -F)-e[process packages that match an evaluation]:evaluation:->evaluation' \
				'(-g -x -X -a -e)-F[process the specified package]:package:_files -g "*.t?z"' \
				':output format:->query' \
				&& ret=0
			;;
		(register)
			_arguments -s \
				'-l[register as a legacy format]' \
				'-d[mark the package as an automatic dependency]' \
				'-f[packing list file]:packing list file:_files' \
				'-m[metadata directory]:metadatadir:_files -/' \
				'-a[ABI]:abi' \
				'-i[input path (aka root directory)]:input path:_files -/' \
				&& return
			;;
		(repo)
			_arguments -s \
				':repository path:_files -/' \
				':RSA key:_files' \
				&& return
			;;
		(rquery)
			_arguments -C -s \
				'(-g -x -X -e)-a[process all packages]' \
				'(-x -X -a -e)-g[process packages that match the glob pattern]:glob pattern' \
				'(-g -X -a -e)-x[process packages that match a regex pattern]:regex pattern' \
				'(-g -x -a -e)-X[process packages that match a extended regex pattern]:extended regex pattern' \
				'(-g -x -X -a)-e[process packages that match an evaluation]:evaluation:->evaluation' \
				':output format:->query' \
				&& ret=0
			;;
		(search)
			_arguments -s \
				'(-x -X)-g[process packages that match the glob pattern]:glob pattern' \
				'(-g -X)-x[process packages that match the regex pattern]:regex pattern' \
				'(-g -x)-X[process packages that match the extended regex pattern]:extended regex pattern' \
				'*:available package:_pkg_available_name' \
				&& return
			;;
		(set)
			_arguments -s \
				'(-o)-A[mark as automatic or not]:flag:((1\:automatic 0\:not\ automatic))' \
				'(-A)-o[change the origin]:oldorigin\:neworigin' \
				'-y[assume yes when asked for confirmation]' \
				'(-g -x -X)-a[process all packages]' \
				'(-x -X -a)-g[process packages that match the glob pattern]:glob pattern' \
				'(-g -X -a)-x[process packages that match the regex pattern]:regex pattern' \
				'(-g -x -a)-X[process packages that match the extended regex pattern]:extended regex pattern' \
				'*:package:_pkg_installed'
			return 0
			;;
		(shell)
			_arguments -s \
				':database:_files' \
				&& return
			;;
		(shlib)
			_arguments -s \
				':library:' \
				&& return
			;;
		(stats)
			_arguments -s \
				'-q[be quiet]' \
				'(-l)-r[display stats only for the local package database]' \
				'(-r)-l[display stats only for the remote package database(s)]' \
				&& return
			;;
		(update)
			_arguments -s \
				'-f[force update]' \
				'-q[be quiet]' \
				&& return
			;;
		(updating)
			_arguments -s \
				'-d[only entries newer than date are shown]:date' \
				'-f[specify alternative location of the UPDATING file]:UPDATING file:_files' \
				'*:package:_pkg_installed' \
				&& return
			;;
		(upgrade)
			_arguments -s \
				"-F[don't install packages, merely fetch them]" \
				'(-y)-n[assume no (dry run) when asked for confirmation]' \
				'(-n)-y[assume yes when asked for confirmation]' \
				'-f[upgrade/reinstall everything]' \
				'-L[do not try to update the repository metadata]' \
				&& return
			;;
		(version)
			#TODO: complete
			_arguments -s \
				'(-P -R)-I[use INDEX file]' \
				'(-R -I)-P[force checking against the ports tree]' \
				'(-I -P)-R[use remote repository]' \
				'-o[display package origin, instead of package name]' \
				'-q[be quiet]' \
				'-v[be verbose]' \
				'(-L)-l[display only the packages with a given status flag]:flag:((\< = \>))' \
				'(-l)-L[display only the packages without a given status flag]:flag:((\< = \>))' \
				&& return
			;;
		(which)
			_arguments -s \
				':file:_files' \
			&& return
			;;
	esac

	[[ -z $state ]] && return ret
	local -a specs elements
	elements=(
		'd:dependencies' 'r:reverse dependencies' 'C:categories'
		'O:options' 'L:licenses' 'A:annotations'
		'B:required share libraries' 'b:provided shared libraries'
	)
	specs=(
		'n:package name' 'o:origin' 'p:prefix' 'm:maintainer'
		'c:comment' 'e:description' 'w:home page' 's:size'
		'q:architecture' 'M:message'
		'?:if info exists' '#:no of elements'
	)
	if [[ $service = query ]]; then
		specs+=( 'a:automatic' 'k:locked' 't:timestamp' )
		elements+=( 'F:files' 'D:directories'  'U:users' 'G:groups' )
  fi
	if [[ $state = query ]]; then
    specs+=( 'v:version' 'l:license' 'R:repository' )
		compset -P '(%[^sOFdrA?#]|%?[^%]|[^%])#'
  else
		compset -P '(%[^OFdrA?#]|%?[^%]|[^%])#'
  fi
	if compset -P '%s'; then
		_describe -t units unit '( b:bytes h:human\ readable )' -S '' && ret=0
	elif compset -P '%F'; then
		_describe -t properties property '( p:path s:sum )' -S '' && ret=0
	elif compset -P '%O'; then
		_describe -t properties property '( k:key v:value d:default D:description )' -S '' && ret=0
	elif compset -P '%[dr]'; then
		_describe -t properties 'dependency property' '( n:name o:origin v:version )' -S '' && ret=0
	elif compset -P '%A'; then
		_describe -t properties property '( t:tag s:value )' -S '' && ret=0
	elif compset -P '%(|\\)[?#]'; then
		_describe -t lists list elements -S '' && ret=0
	else
		[[ $IPREFIX = *%(#b)([${(j..)elements%%:*}])* ]] &&
			elements=( ${(M)elements:#$match[1]:*} )
		if [[ $state = evaluation ]]; then
		  _tags variables operators
		else
		  _tags patterns elements
		fi
		while _tags; do
			_requested elements && _describe -t elements 'list element' elements -p % -S '' && ret=0
			_requested variables && _describe -t variables 'variable' specs -p % -S '' && ret=0
			_requested patterns && _describe -t patterns 'query specifier' specs -p % -S '' && ret=0
			_requested operators expl operator compadd -S '' \~ {,\!,\>,\<}= \> \< \&\& \|\| && ret=0
		  (( ret )) || break
		done
	fi
	return ret
}

_pkg "$@"
